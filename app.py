from flask import Flask, render_template, redirect, url_for, flash, request, session
from flask_sqlalchemy import SQLAlchemy
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField
from wtforms.validators import DataRequired, Length
import os
import subprocess 
import logging
from logging.handlers import RotatingFileHandler

from models import db, User
from forms import RegistrationForm, LoginForm, UploadForm  # Add this line to import the form classes

# Some default / base configurations 
app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'
app.config['UPLOAD_FOLDER'] = 'uploads'
db.init_app(app)

remnux_vm='REMnux'
flare_vm='Flarevm'

# Configure logging
logging.basicConfig(level=logging.INFO)
handler = RotatingFileHandler('app.log', maxBytes=10000, backupCount=1)
handler.setLevel(logging.INFO)
app.logger.addHandler(handler)

@app.route('/')
def home():
    if 'username' in session:
        # Redirect to the dashboard or another page for logged-in users
        return redirect(url_for('dashboard'))
    return redirect(url_for('login'))


@app.route('/dashboard', methods=['GET', 'POST'])
def dashboard():
    upload_form = UploadForm()

    if request.method == 'POST' and upload_form.validate_on_submit():
        malware_file = request.files['malware_file']

        if malware_file:
            file_path = os.path.join(app.config['UPLOAD_FOLDER'], malware_file.filename)
            malware_file.save(file_path)
            flash(f'Malware file "{malware_file.filename}" uploaded successfully!', 'success')
        else:
            flash('No file selected for upload.', 'danger')

    return render_template('dashboard.html', upload_form=upload_form)

@app.route('/register', methods=['GET', 'POST'])
def register():
    form = RegistrationForm()

    if form.validate_on_submit():
        existing_user = User.query.filter_by(username=form.username.data).first()

        if existing_user:
            flash('Username is already taken. Please choose a different one.', 'danger')
        else:
            user = User(username=form.username.data, password=form.password.data)
            db.session.add(user)
            db.session.commit()
            flash('Your account has been created! You can now log in.', 'success')
            return redirect(url_for('login'))

    return render_template('register.html', form=form)


@app.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if user and user.password == form.password.data:
            session['username'] = user.username  # Store the username in the session
            flash('Login successful!', 'success')
            return redirect(url_for('dashboard'))
        else:
            flash('Login unsuccessful. Please check your username and password.', 'danger')
    return render_template('login.html', form=form)

@app.route('/logout', methods=['POST'])
def logout():
    # Clear the session to log out the user
    session.clear()
    flash('You have been logged out.', 'success')
    return redirect(url_for('login'))

# check if any of the Vms is running first 
def is_vm_running(vm_name):
    process = subprocess.run(['VBoxManage', 'showvminfo', vm_name], capture_output=True, text=True)
    return 'running' in process.stdout

def start_vm(vm_name):
    process = subprocess.run(['VBoxManage', 'startvm', vm_name, '--type', 'headless'], capture_output=True, text=True)
    return process.returncode

def start_sandbox_vms():
    log_messages = []

    # Check if Remnux VM is already running
    if is_vm_running(remnux_vm):
        log_messages.append(f'{remnux_vm} is already running.')
    else:
        # Start Remnux VM in headless mode
        if start_vm(remnux_vm) == 0:
            log_messages.append(f'{remnux_vm} started successfully.')
        else:
            log_messages.append(f'Failed to start {remnux_vm}.')

    # Check if Flarevm VM is already running
    if is_vm_running(flare_vm):
        log_messages.append(f'{flare_vm} is already running.')
    else:
        # Start Flarevm VM in headless mode
        if start_vm(flare_vm) == 0:
            log_messages.append(f'{flare_vm} started successfully.')
        else:
            log_messages.append(f'Failed to start {flare_vm}.')

    flash('\n'.join(log_messages), 'success')


@app.route('/start_sandbox', methods=['POST'])
def start_sandbox():
    start_sandbox_vms()
    return redirect(url_for('dashboard'))


if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True, port=5001)
