from flask import Flask, render_template, redirect, url_for, flash, request, session
from flask_sqlalchemy import SQLAlchemy
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField
from wtforms.validators import DataRequired, Length
import os
import subprocess 

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'
app.config['UPLOAD_FOLDER'] = 'uploads'

db = SQLAlchemy(app)


class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(20), unique=True, nullable=False)
    password = db.Column(db.String(60), nullable=False)


class RegistrationForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired(), Length(min=2, max=20)])
    password = PasswordField('Password', validators=[DataRequired()])
    submit = SubmitField('Sign Up')


class LoginForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired(), Length(min=2, max=20)])
    password = PasswordField('Password', validators=[DataRequired()])
    submit = SubmitField('Login')

class UploadForm(FlaskForm):
    malware_file = StringField('Malware File', validators=[DataRequired()])
    submit_upload = SubmitField('Upload Malware')
    
@app.route('/')
def home():
    if 'username' in session:
        # Redirect to the dashboard or another page for logged-in users
        return redirect(url_for('dashboard'))
    return redirect(url_for('login'))


@app.route('/dashboard', methods=['GET', 'POST'])
def dashboard():
    upload_form = UploadForm()

    if request.method == 'POST' and upload_form.validate_on_submit():
        malware_file = request.files['malware_file']

        if malware_file:
            file_path = os.path.join(app.config['UPLOAD_FOLDER'], malware_file.filename)
            malware_file.save(file_path)
            flash(f'Malware file "{malware_file.filename}" uploaded successfully!', 'success')
        else:
            flash('No file selected for upload.', 'danger')

    return render_template('dashboard.html', upload_form=upload_form)


@app.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if user and user.password == form.password.data:
            session['username'] = user.username  # Store the username in the session
            flash('Login successful!', 'success')
            return redirect(url_for('dashboard'))
        else:
            flash('Login unsuccessful. Please check your username and password.', 'danger')
    return render_template('login.html', form=form)

def start_sandbox_vms():
    try:
        # Start Remnux VM in headless mode
        subprocess.run(['VBoxManage', 'startvm', 'Remnux', '--type', 'headless'])
        
        # Start Flarevm VM in headless mode
        subprocess.run(['VBoxManage', 'startvm', 'Flarevm', '--type', 'headless'])

        # Add any additional VMs you want to start here

        flash('Sandbox VMs started successfully!', 'success')
    except subprocess.CalledProcessError as e:
        flash(f'Error starting VMs: {e}', 'danger')

@app.route('/start_sandbox', methods=['POST'])
def start_sandbox():
    start_sandbox_vms()
    return redirect(url_for('dashboard'))

    
# @app.route('/start_sandbox', methods=['POST'])
# def start_sandbox():
#     try:
#         start_sandbox_vms()
#         flash('Sandbox started successfully!', 'success')
#     except Exception as e:
#         flash(f'Error starting sandbox: {str(e)}', 'danger')

#     return redirect(url_for('dashboard'))

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True)
